<?xml version="1.0" encoding="Windows-1251"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
	"http://colorer.sf.net/2003/hrc.dtd"[
<!ENTITY d1-phobos SYSTEM "d1-phobos.ent.hrc">
<!ENTITY d1-tango SYSTEM "d1-tango.ent.hrc">
<!ENTITY d2-phobos SYSTEM "d2-phobos.ent.hrc">
]>
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd"
 >
	
<type name="d">
	<annotation><documentation>
		D syntax description
	</documentation><contributors><![CDATA[
		Eugene Efremov <4mirror@mail.ru>
		Vladimir Panteleev <thecybershadow@gmail.com>
	]]></contributors>
	<appinfo><todo>
		- Fix delegate outlines (how?)
		- Figure out highlighting of properties
	</todo></appinfo>
</annotation>

<region name='comment' parent='def:Comment'/>
<region name='comment.quote' parent='comment'/>
<region name='ddoc' parent='def:CommentDoc'/>
<region name='ddoc.quote' parent='ddoc'/>
<region name='ddoc.sectiontitle' parent='def:String'/>
<region name='ddoc.macro' parent='ddoc'/>
<region name='ddoc.macro.symbol' parent='def:Comment'/>
<region name='ddoc.macro.quote' parent='def:Comment'/>
<region name='ddoc.example' parent='def:Text'/>
<region name='ddoc.example.quote' parent='ddoc'/>

<region name='char.esc' parent='c:StringEscape'/>
<region name='char' parent='c:Character'/>
<region name='string' parent='def:String'/>
<region name='string.quote' parent='def:StringEdge'/>
<region name='string.pref' parent='regexp:SpecArea'/>
<region name='string.format' parent='def:VarStrong'/>
<region name='string.token' parent='def:Text'/>
<region name='string.delimited' parent='perl:HereDoc'/>
<region name='string.delimited.name' parent='perl:HereDocName'/>

<region name='prefix' parent='def:NumberPrefix'/>
<region name='postfix' parent='def:NumberSuffix'/>
<region name='suffix' parent='def:NumberSuffix'/>

<region name='symb' parent='c:Symbol'/>
<region name='symb.op' parent='symb'/>
<region name='symb.struct' parent='c:StructureSymbol'/>
<region name='symb.tpl' parent='symb.struct'/>

<region name='key' parent='def:Keyword'/>
<region name='key.bool' parent='key'/>
<region name='key.type' parent='def:Keyword'/>
<region name='key.spec' parent='def:Constant'/>
<region name='key.over' parent='key'/>
<region name='key.var' parent='def:Var'/>
<region name='key.prop' parent='def:KeywordStrong'/>

<region name='key.lib.alias' parent='def:Keyword'/>
<region name='key.lib.typedef' parent='def:Keyword'/>
<region name='key.lib.template' parent='def:Keyword'/>
<region name='key.lib.struct' parent='def:StructKeyword'/>
<region name='key.lib.union' parent='def:StructKeyword'/>
<region name='key.lib.class' parent='def:ClassKeyword'/>
<region name='key.lib.interface' parent='def:InterfaceKeyword'/>
<region name='key.lib.enum' parent='def:TypeKeyword'/>
<region name='key.lib.enum-member' parent='def:Constant'/>
<region name='key.lib.variable' parent='def:Constant'/>
<region name='key.lib.function' parent='def:FunctionKeyword'/>

<region name='key.fun.main' parent='key.lib.function'/>

<region name='decl.module' parent='def:Directive'/>
<region name='decl' parent='def:Directive'/>

<region name='label' parent='def:Label'/>
<region name='label.mark' parent='def:Label'/>
<region name='label.const' parent='def:Constant'/>

<region name='out' parent='def:Outlined'/>
<region name='module.out' parent='java:PackageOutline'/>
<region name='import.out' parent='java:ImportOutline'/>
<region name='class.out' parent='cpp:ClassOutline'/>
<region name='struct.out' parent="c:StructOutline"/>
<region name='tpl.out' parent="struct.out"/>
<region name='iface.out' parent='class.out'/>
<region name='enum.out' parent="c:EnumOutline"/>
<region name='version.out' parent='out'/>
<region name='fun.out' parent='c:FuncOutline'/>


<entity name='id' value='\b[\w-[\d]]\w*\b'/>
<entity name='hex' value='[\dA-Fa-f]'/>

<!-- error -->

<scheme name='error'>
	<regexp match='/\S/' region='def:Error' priority='low'/>
</scheme>

<scheme name='error.strong'>
	<regexp match='/./' region='def:Error' priority='low'/>
</scheme>


<!-- comments/DDoc -->

<scheme name='comment.content'>
	<inherit scheme='def:Comment'/>
</scheme>

<scheme name='ddoc.content'>
	<inherit scheme='comment.content'/>
	<regexp match='/^\s*\S+:/' region='ddoc.sectiontitle'/>
	<block scheme='ddoc.content' region='ddoc'>
		<start match='/(\()/' region1='def:PairStart'/>
		<end   match='/(\))/' region1='def:PairEnd'/>
	</block>
	<block scheme='ddoc.content' region='ddoc.macro'>
		<start match='/(\$\()(\w+)/' region0='ddoc.macro.quote' region1='def:PairStart' region2='ddoc.macro.symbol'/>
		<end   match='/(\))/' region0='ddoc.macro.quote' region1='def:PairEnd'/>
	</block>
	<block scheme='d.lang' region='ddoc.example'>
		<start match='/(^-{3,}$)/' region0='ddoc.example.quote' region1='def:PairStart'/>
		<end   match='/(^-{3,}$)/' region0='ddoc.example.quote' region1='def:PairEnd'/>
	</block>
</scheme>


<scheme name='comment.rec.block'>
	<block scheme='ddoc.rec' region='ddoc'>
		<start match='/(\/\+\+)/' region0='ddoc.quote' region1='def:PairStart'/>
		<end   match='/(\+\/)/' region0='ddoc.quote' region1='def:PairEnd'/>
	</block>
	<block scheme='comment.rec' region='comment'>
		<start match='/(\/\+)/' region0='comment.quote' region1='def:PairStart'/>
		<end   match='/(\+\/)/' region0='comment.quote' region1='def:PairEnd'/>
	</block>
</scheme>

<scheme name='comment.rec'>
	<inherit scheme='comment.content'/>
	<inherit scheme='comment.rec.block'/>
</scheme>

<scheme name='ddoc.rec'>
	<inherit scheme='ddoc.content'/>
	<inherit scheme='comment.rec.block'/>
</scheme>

<scheme name='comment'>
	<block start='/(\/\/\/)/' end='/$/'
		scheme='ddoc.content' region='ddoc' region00='ddoc.quote' 
	/>
	<block scheme='ddoc.content' region='ddoc'>
		<start match='/(\/\*\*)/' region0='ddoc.quote' region1='def:PairStart'/>
		<end   match='/(\*\/)/' region0='ddoc.quote' region1='def:PairEnd'/>
	</block>
	<inherit scheme='comment.rec.block'/>

	<block start='/(\/\/)/' end='/$/'
		scheme='comment.content' region='comment' region00='comment.quote' 
	/>
	<block scheme='comment.content' region='comment'>
		<start match='/(\/\*)/' region0='comment.quote' region1='def:PairStart'/>
		<end   match='/(\*\/)/' region0='comment.quote' region1='def:PairEnd'/>
	</block>
	<inherit scheme='comment.rec.block'/>
</scheme>



<!-- char/string -->
<entity name='str.post' value='(?{postfix}[cwd]?)'/>

<scheme name='char.entity'>
	<inherit scheme='html-entity:html-addref'/>
	<inherit scheme='error.strong'/>
</scheme>

<scheme name='char.quote'>
	<block start='/(\\)&amp;\M\w+;/' end='/~\w+\m;/' 
		scheme='char.entity' region='xml:CharRef' 
		region01='char.esc'
	/>
	<regexp match='/\\[&apos;&quot;?\\abfnrtv]/' region='char.esc'/>
	<regexp match='/\\x%hex;{2}/' region='char.esc'/>
	<regexp match='/\\u%hex;{4}/' region='char.esc'/>
	<regexp match='/\\U%hex;{8}/' region='char.esc'/>
	<regexp match='/\\[0-7]{1,3}/' region='char.esc'/>
	<regexp match='/\\./' region='def:Error'/>
</scheme>

<scheme name='char.content'>
	<inherit scheme='char.quote'/>
	<inherit scheme='error.strong'/>
</scheme>

<scheme name='char'>
	<regexp match="/(')([^'\\])(')/" region='string.quote'
		region1='def:PairStart' region2='string' region3='def:PairEnd'
	/>
	<block scheme='char.content' region='string'>
		<start match="/(')\M\\/" region0='string.quote' region1='def:PairStart'/>
		<end   match="/(')/"     region0='string.quote' region1='def:PairEnd'/>
	</block>
	<inherit scheme='char.quote'/>
</scheme>

<scheme name='string.format' if='format-str'>
	<regexp match='/\%{2}/' region='char.esc'/>
	<regexp match='/\%[\-+#0 ]?(\d+|\*)?(\.(\d+|\*)?)?[sbdoxXeEfFgGaA]/' region='string.format'/>
</scheme>

<scheme name='string.content'>
	<inherit scheme='char.quote'/>
	<inherit scheme='string.format'/>
</scheme>

<scheme name='string.hex'>
	<regexp match='/%hex;/' region='char.esc'/>
	<inherit scheme='error'/>
</scheme>

<scheme name='string.all'>
	<block scheme='def:empty' region='string'>
		<start match='/(r)(")/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart'
		/>
		<end match='/(")%str.post;/' region0='string.quote' region1='def:PairEnd'/>
	</block>
	<block scheme='def:empty' region='string'>
		<start match='/(`)/' region0='string.quote' region1='def:PairStart'/>
		<end   match='/(`)%str.post;/' region0='string.quote' region1='def:PairEnd'/>
	</block>
	
	<block scheme='string.hex' region='string'>
		<start match='/(x)(")/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart'
		/>
		<end match='/(")%str.post;/' region0='string.quote' region1='def:PairEnd'/>
	</block>

	<inherit scheme='string.all.d2'/>
	
	<block scheme='string.content' region='string'>
		<start match='/(")/' region0='string.quote' region1='def:PairStart'/>
		<end match='/(")%str.post;/' region0='string.quote' region1='def:PairEnd'/>
	</block>
</scheme>

<scheme name='string.all.d2' if='d2'>
	<block scheme='d.lang' region='string.token'>
		<start match='/((q)\{)/' 
			region0='string.quote'  region1='def:PairStart' region2='string.pref'
		/>
		<end match='/(\})/' region0='string.quote' region1='def:PairEnd'/>
	</block>

	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(%id;))$/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/^((\y3)")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>
	
	<!-- TODO: implement nesting -->
	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(\())/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/((\))")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>
	
	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(\[))/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/((\])")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>
	
	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(\{))/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/((\})")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>
	
	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(&lt;))/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/((&gt;)")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>

	<block scheme='def:empty' region='string.delimited'>
		<start match='/(q)("(\S))/' 
			region0='string.quote' region1='string.pref' region2='def:PairStart' region3='string.delimited.name'
		/>
		<end match='/((\y3)")/' region0='string.quote' region1='def:PairEnd' region2='string.delimited.name'/>
	</block>
</scheme>

<scheme name='string'>
	<inherit scheme='char'/>
	<inherit scheme='string.all'/>
</scheme>


<!-- literal -->

<entity name='int.post' value='(?{postfix}[LUlu]{0,2})'/>
<entity name='float.post' value='(?{postfix}[fFL]i|[fFL]|i)'/>

<entity name='hexd' value='[\dA-Fa-f_]'/>

<scheme name='literal.int'>
	<regexp match='/\b0%int.post;\b/' region='def:NumberDec'/>
	<regexp match='/\b[1-9][\d_]*%int.post;\b/' region='def:NumberDec'/>
	<regexp match='/\b(0)[1-70_]+%int.post;\b/' region='def:NumberOct' region1='prefix'/>
	<regexp match='/\b0(b)[10_]+%int.post;\b/i' region='def:NumberBin' region1='prefix'/>
	<regexp match='/\b0(x)%hexd;+%int.post;\b/i' region='def:NumberHex' region1='prefix'/>
</scheme>

<entity name='float.exp' value='(?{}(?{suffix}[eE][\-+]?)\d[\d_]*)'/>
<entity name='float.exh' value='(?{}(?{suffix}[pP][\-+]?)\d[\d_]*)'/>

<scheme name='literal.float'>
	<regexp 
		match='/(\b\d[\d_]*\.[\d_]*|\.\d+)%float.exp;?%float.post;?\b/'
		region0='def:NumberFloat'
	/>
	<regexp 
		match='/\b0(x)(%hexd;+*\.%hexd;*|\.%hexd;+)%float.exh;?%float.post;?\b/i'
		region0='def:NumberFloat' region1='prefix'
	/>
	
	<regexp match='/\b([1-9][\d_]*|0_*)(%float.exp;|%float.post;|%float.exp;%float.post;)\b/i'
		region0='def:NumberFloat'
	/>
	<regexp match='/\b0(x)(%hexd;+)(%float.exh;|%float.post;|%float.exh;%float.post;)\b/i'
		region0='def:NumberFloat' region1='prefix'
	/>
	
	<!--
	<regexp 
		match='/\w?~1(\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eE][\+\-]?)\d[\d_]*%float.post;\b/'
		region0='def:NumberFloat' region3='suffix'
	/>
	<regexp 
		match='/\w?~1(\d[\d_]*\.[\d_]*|\.\d[\d_]*)%float.post;\w?!/'
		region0='def:NumberFloat' 
	/>
	
	<regexp 
		match='/\b0([xX])[\dA-Fa-f_]*(\.[\dA-Fa-f_]*)?([pP][\+\-]?)\d[\d_]*%float.post;\b/'
		region0='def:NumberFloat' region1='prefix' region3='suffix'
	/>-->
</scheme>

<scheme name='literal.bool'>
	<keywords region='key.bool'>
		<word name='true'/>
		<word name='false'/>
		<word name='null'/>
	</keywords>
</scheme>

<scheme name='literal'>
	<inherit scheme='literal.float'/>
	<inherit scheme='literal.int'/>
	<inherit scheme='literal.bool'/>
	<regexp match='/\b\d+/' region='def:Error'/>
</scheme>


<scheme name='op'>
	<block scheme='d.expr'>
		<start match='/(\?)/' 
			region0='symb.struct' region1='def:PairStart'
		/>
		<end match='/(\:)/' 
			region0='symb.struct' region1='def:PairEnd'
		/>
	</block>
	
	
	<keywords region='symb.op'>
		<symb name='/'/>
		<symb name='/='/>
		<symb name='.'/>
		<symb name='..'/>
		<symb name='...'/>
		<symb name='&amp;'/>
		<symb name='&amp;='/>
		<symb name='&amp;&amp;'/>
		<symb name='|'/>
		<symb name='|='/>
		<symb name='||'/>
		<symb name='-'/>
		<symb name='-='/>
		<symb name='--'/>
		<symb name='+'/>
		<symb name='+='/>
		<symb name='++'/>
		<symb name='&lt;'/>
		<symb name='&lt;='/>
		<symb name='&lt;&lt;'/>
		<symb name='&lt;&lt;='/>
		<symb name='&lt;>'/>
		<symb name='&lt;>='/>
		<symb name='>'/>
		<symb name='>='/>
		<symb name='>>='/>
		<symb name='>>>='/>
		<symb name='>>'/>
		<symb name='>>>'/>
		<symb name='!'/> <!-- ?? not work -->
		<symb name='!='/>
		<symb name='!=='/>
		<symb name='!&lt;>'/>
		<symb name='!&lt;>='/>
		<symb name='!&lt;'/>
		<symb name='!&lt;='/>
		<symb name='!>'/>
		<symb name='!>='/>
		<symb name='!~'/>
		<symb name='$' region='def:Var'/>
		<symb name='='/>
		<symb name='=='/>
		<symb name='==='/>
		<symb name='*'/>
		<symb name='*='/>
		<symb name='%'/>
		<symb name='%='/>
		<symb name='^'/>
		<symb name='^='/>
		<symb name='~'/>
		<symb name='~='/>
		<symb name='~~'/>
		<word name='is'/>
	</keywords>
	<regexp match='/\!/' region='symb.op'/>
</scheme>

<!-- types -->

<scheme name='type.arr'>
	<inherit scheme='literal.int'/>
	<inherit scheme='type'/>
</scheme>

<scheme name='type'>
	<keywords region='key.type'>
		<word name='void'/>
		<word name='bit'/>
		<word name='bool'/>
		<word name='byte'/>
		<word name='ubyte'/>
		<word name='short'/>
		<word name='ushort'/>
		<word name='int'/>
		<word name='uint'/>
		<word name='long'/>
		<word name='ulong'/>
		<word name='cent'/>
		<word name='ucent'/>
		<word name='float'/>
		<word name='double'/>
		<word name='real'/>
		<word name='ifloat'/>
		<word name='idouble'/>
		<word name='ireal'/>
		<word name='cfloat'/>
		<word name='cdouble'/>
		<word name='creal'/>
		<word name='char'/>
		<word name='wchar'/>
		<word name='dchar'/>
		
		<word name='size_t'/>
		<word name='hash_t'/>
		
		<word name='string'/>
		<word name='wstring'/>
		<word name='dstring'/>
		
		<word name='auto'/>
		<word name='alias'/>
		
		<!-- type class -->
	</keywords>
	
	<keywords region='symb'>
		<symb name='*'/>
	</keywords>
	<block scheme='type.arr'>
		<start match='/(\[)/' 
			region0='symb' region1='def:PairStart'
		/>
		<end match='/(\])/' 
			region0='symb' region1='def:PairEnd'
		/>
	</block>
	<block scheme='type'>
		<start match='/(\()/' 
			region0='symb' region1='def:PairStart'
		/>
		<end match='/(\))/' 
			region0='symb' region1='def:PairEnd'
		/>
	</block>
	<block scheme='d.expr'>
		<start match='/\b(function|delegate|typeof)\s*((\())/' 
			region1='key' region2='symb' region3='def:PairStart'
		/>
		<end match='/((\)))/' 
			region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	<keywords region='key.type'>
		<word name='typedef'/>
		<word name='struct'/>
		<word name='union'/>
		<word name='class'/>
		<word name='interface'/>
		<word name='enum'/>
		<word name='function'/>
		<word name='delegate'/>
		<word name='return'/>
		<word name='this'/>
	</keywords>

	<inherit scheme='type.d2'/>
</scheme>

<scheme name='type.d2' if='d2'>
	<keywords region='key.type'>
		<word name='immutable'/>
	</keywords>
</scheme>


<!-- module -->

<scheme name='module.content'>
	<regexp match='/%id;(\.)\M%id;/' region='decl.module' region1='symb'/>
	<regexp match='/%id;/' region='decl.module'/>
	<inherit scheme='comment'/>
	<inherit scheme='error'/>
</scheme>

<scheme name='module'>
	<block start='/^\s*module\M\s+([\w\.]*)/' end='/;/' scheme='module.content'
		region00='key' region10='symb.struct' region01='module.out'
	/>
</scheme>



<!-- templates -->


<scheme name='tpl'>
	<block scheme='type'>
		<start match='/\bcast\s*((\())/' 
			region0='key' region1='symb.struct' region2='def:PairStart'
		/>
		<end match='/(\))/' 
			region0='symb.struct' region1='def:PairEnd'
		/>
	</block>
	
	<inherit scheme='tpl.tpl'/>
</scheme>


<scheme name='tpl.fun.proxy'>
	<block scheme='decl.class.tpl'>
		<start match='/(\()/' region0='symb.tpl' region1='def:PairStart' />
		<end match='/(\))/'    region0='symb.tpl' region1='def:PairEnd'   />
	</block>
	<inherit scheme='keys'/>
</scheme>

<scheme name='tpl.tpl.proxy'>
	<block scheme='d.expr'>
		<start match='/(!\()/' region0='symb.tpl' region1='def:PairStart' />
		<end match='/(\))/'    region0='symb.tpl' region1='def:PairEnd'   />
	</block>
	<inherit scheme='keys'/>
</scheme>

<scheme name='tpl.tpl'>
	<block scheme='tpl.tpl.proxy' start='/\M%id;\s*!\(/' end='/\)?#1/' />
</scheme>



<!-- declares -->
<!-- decl.import -->

<scheme name='decl.import.content'>
	<keywords region='symb'>
		<symb name=','/>
		<symb name='='/>
		<symb name=':'/>
	</keywords>
	<inherit scheme='module.content'/>
</scheme>

<scheme name='decl.import'>
	<block start='/\bimport\M\s+([\w\.\s\,\:\=]*)/' end='/;/' scheme='decl.import.content'
		region00='key' region10='symb.struct' region01='import.out'
	/>
</scheme>


<!-- decl.attr -->

<scheme name='decl.attr.extern'>
	<keywords region='decl'>
		<symb name='C++'/>
		<word name='C'/>
		<word name='D'/>
		<word name='Windows'/>
		<word name='Pascal'/>
	</keywords>
	<inherit scheme='error'/>
</scheme>

<scheme name='decl.attr.align'>
	<inherit scheme='literal.int'/>
	<inherit scheme='error'/>
</scheme>

<scheme name='decl.attr.pragma'>
	<regexp match='/~\s*(msg|lib)\b/' region='decl'/>
	<inherit scheme='d.expr'/> <!-- !!!!!!!!!!!! -->
</scheme>

<scheme name='decl.attr.vd'>
	<regexp match='/%id;/' region='decl'/>
	<inherit scheme='decl.attr.align'/>
</scheme>


<scheme name='decl.attr'>
	
	<!-- extern -->
	<block scheme='decl.attr.extern'>
		<start match='/\bextern\s*((\())/' 
			region0='key' region1='symb' region2='def:PairStart'
		/>
		<end match='/((\)))\s*:?/' 
			region0='label.mark' region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	<!-- align -->
	<block scheme='decl.attr.align'>
		<start match='/\balign\s*((\())/' 
			region0='key' region1='symb' region2='def:PairStart'
		/>
		<end match='/((\)))\s*:?/' 
			region0='label.mark' region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	<!-- version -->
	<block scheme='decl.attr.vd'><!-- \M(\s*\w+ -->
		<start match='/\bversion\s*((\())\M(\s*\w+)/' 
			region0='key' region1='symb' region2='def:PairStart' region3='version.out'
		/>
		<end match='/((\)))\s*:?/' 
			region0='label.mark' region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	<!-- pragma -->
	<block scheme='decl.attr.pragma'>
		<start match='/\bpragma\s*((\())/' 
			region0='key' region1='symb' region2='def:PairStart'
		/>
		<end match='/((\)))\s*:?/' 
			region0='label.mark' region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	<!-- debug -->
	<block scheme='decl.attr.vd'>
		<start match='/\b(debug)\s*((\())/' 
			region1='key' region2='symb' region3='def:PairStart' 
		/>
		<end match='/((\)))\s*:?/' 
			region0='label.mark' region1='symb' region2='def:PairEnd'
		/>
	</block>
	
	
	<regexp region1='key' region2='label.mark'>
		/\b ( extern
			| align 
			| deprecated
			| private
			| package
			| protected
			| public
			| export
			| static
			| final
			| override
			| abstract
			| const
			| auto
			| debug
		)\b\s*(:)?/x</regexp>
	
	<inherit scheme='decl.attr.d2'/>
</scheme>

<scheme name='decl.attr.d2' if='d2'>
	<regexp region1='key' region2='label.mark'>
		/\b ( pure
			| nothrow
			| shared
			| immutable
			| __gshared
		)\b\s*(:)?/x</regexp>
	<regexp region1='key' region3='label.mark'>
		/(@ ( property
			| safe
			| trusted
			| system
			| disable
		))\b\s*(:)?/x</regexp>
</scheme>


<!-- decl.class -->

<scheme name='decl.class.decl'>
	<block scheme='decl.class.tpl'>
		<start match='/(\()/' region0='def:PairStart' region1='symb.tpl'/>
		<end match='/(\))/' region0='def:PairEnd' region1='symb.tpl'/>
	</block>
	<inherit scheme='comment'/>
	<inherit scheme='keys'/>
	<!--regexp match='/\S/' region='def:Error' priority='low'/-->
</scheme>


<scheme name='decl.class.tpl'>
	<inherit scheme='type'/>
	<inherit scheme='literal'/>
	<keywords region='symb'>
		<symb name=','/>
		<symb name=':' region='symb.struct'/>
		<symb name='='/>
		<symb name='...'/>
	</keywords>
	<inherit scheme='tpl.tpl'/>
	<inherit scheme='comment'/>
	<inherit scheme='keys'/>
</scheme>

<scheme name='decl.class'>
	<!-- Heuristics template/outline search  -->
	<block scheme='decl.class.decl'><!-- (\s*\(.+?\))? -->
		<start match='/\b(class)\s+\M(%id;(\s*\(.+?(\)|$))?)/' 
			region1='key' region2='class.out'
		/>
		<end match='/(:)|\{?=/' region1='symb.struct'/>
	</block>
	<block scheme='decl.class.decl'>
		<start match='/\b(struct|union)\s+\M(%id;(\s*\(.+?(\)|$))?)/' 
			region1='key' region2='struct.out'
		/>
		<end match='/\{?=/'/>
	</block>
	<block scheme='decl.class.decl'>
		<start match='/\b(template)\s+\M(%id;\s*\(.+?(\)|$))/' 
			region1='key' region2='tpl.out'
		/>
		<end match='/\{?=/'/>
	</block>
	<block scheme='def:empty'> <!-- no templates -->
		<start match='/\b(enum)\b\s*\M(%id;)?/'  
			region1='key' region2='enum.out'
		/>
		<end match='/([:=])|\{?=/' region1='symb'/>
	</block>
	<block scheme='def:empty'> <!-- no templates ?? -->
		<start match='/\b(interface)\b\s+\M(%id;)/' 
			region1='key' region2='iface.out'
		/>
		<end match='/(:)|\{?=/' region1='symb.struct'/>
	</block>
	
	
	<!-- sometimes heuristics fail :-( -->
	<keywords region='key'>
		<word name='class'/>
		<word name='struct'/>
		<word name='union'/>
		<word name='template'/>
		<word name='emun'/>
		<word name='interface'/>
	</keywords>
	
</scheme>


<!-- decl.cong --> 

<scheme name='decl.cong'>
	<keywords region='key'>
		<word name='invariant'/>
		<word name='unittest'/>
	</keywords>
</scheme>



<!-- decl.constr -->

<scheme name='decl.constr'>
	<block scheme='d.expr'>
		<start match='/(\w?~1(\~?this|new|delete)\s*((\())\M.+?(\)|$))[^;]*$/' 
			region1='fun.out'
			region2='key' region3='symb' region4='def:PairStart'
		/>
		<end match='/(\))/' 
			region0='symb' region1='def:PairEnd'
		/>
	</block>
	<keywords region='key'>
		<word name='this'/>
		<word name='super'/>
		<word name='new'/>
		<word name='delete'/>
	</keywords>
	
	
</scheme> 

<scheme name='decl.fun'>
	<!-- bug: this doesn't work correctly with delegates -->
	<regexp match='/\M(?{fun.out}(\bout\b)?!%id;(\s*\([^\);]*?\)){1,2})[^;]*($|\{)/'/>
	
	<block scheme='tpl.fun.proxy'>
		<start match='/\M%id;\s*\([^\(\);]*?\)\s*\([^\);]*?\)[^;]*($|\{)/'/>
		<end match='/\)?#1/'/>
	</block>   
	
	<keywords region='key.over'>
		<word name='opPos'/>
		<word name='opNeg'/>
		<word name='opCom'/>
		<word name='opAdd'/>
		<word name='opAdd_r'/>
		<word name='opSub'/>
		<word name='opSub_r'/>
		<word name='opMul'/>
		<word name='opMul_r'/>
		<word name='opDiv'/>
		<word name='opDiv_r'/>
		<word name='opMod'/>
		<word name='opMod_r'/>
		<word name='opEquals'/>
		<word name='opCmp'/>
		<word name='opAnd'/>
		<word name='opAnd_r'/>
		<word name='opOr'/>
		<word name='opOr_r'/>
		<word name='opXor'/>
		<word name='opXor_r'/>
		<word name='opShl'/>
		<word name='opShl_r'/>
		<word name='opShr'/>
		<word name='opShr_r'/>
		<word name='opUShr'/>
		<word name='opUShr_r'/>
		<word name='opCat'/>
		<word name='opCat_r'/>
		<word name='opAssign'/>
		<word name='opAddAssign'/>
		<word name='opSubAssign'/>
		<word name='opMulAssign'/>
		<word name='opDivAssign'/>
		<word name='opModAssign'/>
		<word name='opAndAssign'/>
		<word name='opOrAssign'/>
		<word name='opXorAssign'/>
		<word name='opShlAssign'/>
		<word name='opShrAssign'/>
		<word name='opUShrAssign'/>
		<word name='opCatAssign'/>
		<word name='opPostInc'/>
		<word name='opPostDec'/>
		<word name='opIndex'/>
		<word name='opIndexAssign'/>
		<word name='opSlice'/>
		<word name='opSliceAssign'/>
		<word name='opCall'/>
		<word name='opCast'/>
		<word name='opMatch'/>
		<word name='opNext'/>
		<word name='opIn'/>
		<word name='opIn_r'/>
		<word name='opApply'/>
		<word name='opApplyReverse'/>
	</keywords>
	<inherit scheme='decl.fun.d2'/>
	
	<!-- from Vladimir Panteleev's d.hrc -->
	<keywords region='key.fun.main'>
		<word name="main"/>
		<word name="WinMain"/>
		<word name="DllMain"/>
	</keywords>
</scheme> 

<scheme name='decl.fun.d2' if='d2'>
	<keywords region='key.over'>
		<word name='opStar'/>
		<word name='opDot'/>
		<word name='opDispatch'/>
		<word name='opUnary'/>
		<word name='opIndexUnary'/>
		<word name='opSliceUnary'/>
		<word name='opBinary'/>
		<word name='opBinaryRight'/>
		<word name='opOpAssign'/>
		<word name='opIndexOpAssign'/>
		<word name='opSliceOpAssign'/>
		<word name='opPow'/>
		<word name='opPow_r'/>
		<word name='opPowAssign'/>
	</keywords>
</scheme>




<!-- statemen -->

<scheme name='asmcode'>
	<regexp match='/[\{;]/' region='symb.struct'/>
	<inherit scheme='comment'/>
	<inherit scheme="asm:baseasm"/>
</scheme>


<scheme name='d.statement'>
	<block scheme='d.expr'>
		<start match='/\b(for|foreach(_reverse)?|if|while|with|switch|catch|synchronized|assert|type(id|of)|sizeof)\s*((\())/' 
			region1='key' region4='symb' region5='def:PairStart'
		/>
		<end match='/(\))/' 
			region0='symb' region1='def:PairEnd'
		/>
	</block>
	<regexp match="/\b(scope)(\()\s*(exit|success|failure)\s*(\))/"
		region0='symb' region1='key' region3='decl'
		region2='def:PairStart' region4='def:PairEnd'
	/>
	
	<block start="/\b(asm)\s*?(\{|$)/" end="/(\})/" scheme="asmcode"
		region01="key" region02="symb.struct" region10="symb.struct" 
		region00="def:PairStart" region11="def:PairEnd"
	/>
	
<!--
	<block start='/\basm\b/' end='/\}?#1/' scheme='asm.content' region00='key' />
-->	
	<block scheme='d.expr' region='label.const'>
		<start match='/\b(case|default)\b/' 
			region1='key' region2='symb' region3='def:PairStart'
		/>
		<end match='/:/' region0='label.mark'/>
	</block>
	
	<regexp match='/\b(goto(\s+(case|default))?!|continue|break)\s+(%id;)/' 
		region1='key' region4='label'
	/>
	
	<keywords region='key'>
		<word name='body'/>
		<word name='break'/>
		<word name='catch'/>
		<word name='case'/>
		<word name='continue'/>
		<word name='default'/>
		<word name='do'/>
		<word name='else'/>
		<word name='finally'/>
		<word name='for'/>
		<word name='foreach'/>
		<word name='foreach_reverse'/>
		<word name='goto'/>
		<word name='if'/>
		<word name='mixin'/>
		<word name='override'/>
		<word name='return'/>
		<word name='synchronized'/>
		<word name='throw'/>
		<word name='try'/>
		<word name='typedef'/>
	</keywords>
	
	
	<regexp match='/%id;\s*(:)/' region0='label' region1='label.mark'/>
</scheme>


<scheme name='d.decldef'>
	<inherit scheme='decl.import'/>
	<inherit scheme='decl.attr'/>
	<inherit scheme='decl.class'/>
	<inherit scheme='decl.cong'/>
	<inherit scheme='decl.constr'/>
	<inherit scheme='d.statement'/>
	<!--inherit scheme='tpl'/-->
	<inherit scheme='tpl'/>
	<inherit scheme='decl.fun'/>
	
	
	<!--
	
	block scheme='d.decldef'>
		<start match='/(\{)/' region0='def:PairStart' region1='symb.struct'/>
		<start match='/(\})/' region0='def:PairEnd' region1='symb.struct'/>
	</block-->
	<inherit scheme="def:PairedBrackets">
		<virtual scheme="def:PairedBrackets" subst-scheme="d.decldef"/>
	</inherit>
	
	<inherit scheme='d.expr'/>
</scheme>
<scheme name='d.expr'>

	<inherit scheme="def:PairedBrackets">
		<virtual scheme="def:PairedBrackets" subst-scheme="d.expr"/>
	</inherit>

	<inherit scheme='comment'/>
	<inherit scheme='string'/>
	<inherit scheme='literal'/>
	<regexp match='/;/' region='symb.struct'/>
	<regexp match='/,/' region='symb'/>
	<regexp match='/:/' region='symb' priority='low'/>
	<regexp match='/\$/' region='symb'/>
	<inherit scheme='keys'/>
	<inherit scheme='op'/>
	<inherit scheme='tpl'/>
	<inherit scheme='type'/>
	<keywords region='key'>
		<word name='static'/>
		<word name='auto'/>
		<word name='volatile'/>
		<word name='in'/>
		<word name='out'/>
		<word name='inout'/>
		<word name='lazy'/>
		<word name='mixin'/>
		<word name='scope'/>
		<word name='ref'/>
		
		<!--word name='sizeof'/-->
		<word name='typeid'/>
		<word name='typeof'/>
	</keywords>
	<inherit scheme='tokens.spec'/>
	<inherit scheme='tokens.bad'/>
</scheme>

<!-- special tokens -->

<scheme name='tokens.spec.pre'>
	<inherit scheme='comment'/>
	<inherit scheme='c:PreprocLine'/>
	<inherit scheme='error'/>
</scheme>

<scheme name='tokens.spec'>
	<keywords region='key.spec'>
		<word name='__FILE__'/>
		<word name='__LINE__'/>
		<word name='__DATE__'/>
		<word name='__TIME__'/>
		<word name='__TIMESTAMP__'/>
		<word name='__VENDOR__'/>
		<word name='__VERSION__'/>
	</keywords>
	<block start="/#/" end='/$/'  scheme='tokens.spec.pre' region='c:Preproc'/>
</scheme>


<scheme name='tokens.bad'>
	<keywords region='def:Error'>
		<symb name='{'/>
		<symb name='}'/>
		<symb name='('/>
		<symb name=')'/>
		<symb name='['/>
		<symb name=']'/>
		<symb name='"'/>
		<symb name="'"/>
		<symb name='`'/>
	</keywords>
</scheme>


<scheme name="d.lang">
	<inherit scheme='comment'/>
	<inherit scheme='module'/>
	<inherit scheme='d.decldef'/>
</scheme>

<scheme name='d'>
	<inherit scheme='def:unixCommentFirstline'>
		<virtual scheme="def:def" subst-scheme="d.lang"/>
	</inherit>
</scheme>



<scheme name='d.property'>
	<!-- disabled due to Colorer bug(?):

		{foo!(bar).init}      // } is not highlighted
	
	<regexp region='key.prop' region1='symb'>
		/(\.)\s*(alignof
			| dig
			| dup
			| epsilon
			| idup
			| im
			| infinity
			| init
			| length
			| mangleof
			| mant_dig
			| max
			| max_10_exp
			| max_exp
			| min
			| min_10_exp
			| min_exp
			| nan
			| ptr
			| re
			| reverse
			| sizeof
			| sort
			| stringof
+		)/x
+	</regexp>
+	-->
	<keywords region='key.var'>
		<word name='_argptr'/>
		<word name='_arguments'/>
	</keywords>
	
</scheme>


<scheme name='keys.custom'>
	<inherit scheme='d.property'/>
	<keywords region='key.lib.function'>
		<word name='print'/>
		<word name='toString'/>
		<word name='toHash'/>
		<word name='factory'/>
	</keywords>
	
	<inherit scheme='key.phobos'/>
</scheme>


<scheme name='key.phobos' if='use_phobos'>
	<inherit scheme='key.phobos.d1'/>
	<inherit scheme='key.phobos.d2'/>
</scheme>

<!-- https://github.com/CyberShadow/json2colorer -->

<scheme name='key.phobos.d1' unless='d2'>
	&d1-phobos;
</scheme>

<scheme name='key.phobos.d2' if='d2'>
	&d2-phobos;
</scheme>

<scheme name='key.tango' if='use_tango'>
	&d1-tango;
</scheme>

<scheme name='keys'>
	<inherit scheme='keys.custom'/>
	<keywords region='key'>
		<word name='abstract'/>
		<word name='alias'/>
		<word name='align'/>
		<word name='asm'/>
		<word name='assert'/>
		<word name='auto'/>
		<word name='body'/>
		<word name='bool'/>
		<word name='break'/>
		<word name='byte'/>
		<word name='case'/>
		<word name='cast'/>
		<word name='catch'/>
		<word name='cdouble'/>
		<word name='cent'/>
		<word name='cfloat'/>
		<word name='char'/>
		<word name='class'/>
		<word name='const'/>
		<word name='continue'/>
		<word name='creal'/>
		<word name='dchar'/>
		<word name='debug'/>
		<word name='default'/>
		<word name='delegate'/>
		<word name='delete'/>
		<word name='deprecated'/>
		<word name='do'/>
		<word name='double'/>
		<word name='else'/>
		<word name='enum'/>
		<word name='export'/>
		<word name='extern'/>
		<word name='false'/>
		<word name='final'/>
		<word name='finally'/>
		<word name='float'/>
		<word name='for'/>
		<word name='foreach'/>
		<word name='foreach_reverse'/>
		<word name='function'/>
		<word name='goto'/>
		<word name='idouble'/>
		<word name='if'/>
		<word name='ifloat'/>
		<word name='import'/>
		<word name='in'/>
		<word name='inout'/>
		<word name='int'/>
		<word name='interface'/>
		<word name='invariant'/>
		<word name='ireal'/>
		<word name='is'/>
		<word name='lazy'/>
		<word name='long'/>
		<word name='mixin'/>
		<word name='module'/>
		<word name='new'/>
		<word name='null'/>
		<word name='out'/>
		<word name='override'/>
		<word name='package'/>
		<word name='pragma'/>
		<word name='private'/>
		<word name='protected'/>
		<word name='public'/>
		<word name='real'/>
		<word name='return'/>
		<word name='scope'/>
		<word name='short'/>
		<word name='static'/>
		<word name='struct'/>
		<word name='super'/>
		<word name='switch'/>
		<word name='synchronized'/>
		<word name='template'/>
		<word name='this'/>
		<word name='throw'/>
		<word name='true'/>
		<word name='try'/>
		<word name='typedef'/>
		<word name='typeid'/>
		<word name='typeof'/>
		<word name='ubyte'/>
		<word name='ucent'/>
		<word name='uint'/>
		<word name='ulong'/>
		<word name='union'/>
		<word name='unittest'/>
		<word name='ushort'/>
		<word name='version'/>
		<word name='void'/>
		<word name='volatile'/>
		<word name='wchar'/>
		<word name='while'/>
		<word name='with'/>
	</keywords>
</scheme>

</type>
</hrc>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Colorer Library.
   -
   - The Initial Developer of the Original Code is
   - Eugene Efremov <4mirror@mail.ru>
   - Portions created by the Initial Developer are Copyright (C) 2006-2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   - Vladimir Panteleev <thecybershadow@gmail.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->
