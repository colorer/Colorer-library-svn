<?xml version="1.0"?>
<project default="all" basedir=".">

  <xmlcatalog id="DTDs">
    <dtd publicid="-//OASIS//DTD DocBook XML V4.1.2//EN"
         location="docbook/docbookx.dtd"/>
    <dtd publicid="-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
         location="web-app_2_2.dtd"/>
    <dtd publicid="-//Cail Lomecb//DTD Colorer HRC take5//EN"
         location="${project-root}/src/dtd/hrc.dtd"/>
    <dtd publicid="-//Cail Lomecb//DTD Colorer HRD take5//EN"
         location="${project-root}/src/dtd/hrd.dtd"/>
    <dtd publicid="-//Cail Lomecb//DTD Colorer CATALOG take5//EN"
         location="${project-root}/src/dtd/catalog.dtd"/>
  </xmlcatalog>

  <import file="../../common.xml"/>

  <property name='docbook-dir-url' value='file:/${docbook-dir}'/>

  <macrodef name="xslt-hrc-ref">
    <attribute name="in"/>
    <attribute name="out"/>
    <attribute name="style"/>
    <sequential>
      <xslt in="@{in}" out="@{out}" style="@{style}">
        <xmlcatalog refid="DTDs"/>
        <classpath>
          <pathelement path="${xslt-classpath}"/>
        </classpath>
      </xslt>
    </sequential>
  </macrodef>

  <target name="init">

    <uptodate property="pdf.required" targetfile="hrc-ref.pdf">
      <srcfiles dir="." includes = "hrc-ref*.docbook"/>
    </uptodate>
    <uptodate property="html.required" targetfile="index.html">
      <srcfiles dir="." includes = "hrc-ref*.docbook"/>
    </uptodate>

    <dependset>
      <srcfileset dir="." includes = "hrc-ref*.docbook"/>
      <targetfileset dir="." includes="hrc-ref.docbook-merged"/>
    </dependset>

    <available file='${docbook-dir}/template/titlepage.xsl' property='xslt-exists'/>
    <available file='${fop-dir}/build/fop.jar' property='pdf-exists'/>
    <condition property='hrc-ref-available'>
      <and>
        <isset property='xslt-exists'/>
        <isset property='pdf-exists'/>
      </and>
    </condition>

    <antcall target='hrc-ref-check'/>
  </target>

  <target name="hrc-ref-check" unless='hrc-ref-available'>
    <echo>
* ********** WARNING!!! *************
* Can't find hrc-ref generation dependencies.
* Check your paths to the docbook XSL Transformations,
* and to the FOP PDF processor:
*
* DocBook XSL: ${docbook-dir}
* Apache  FOP: ${fop-dir}
*
* If you have these packages, please fix 'build.properties'
* file in colorer root directory and restart building.
* You can ignore this build error, removing 'fail-on-bad-paths'
* property from the 'build.properties' file.
    </echo>
    <fail if='fail-on-badpaths'>
******** Build stopped because of bad DocBook XSLT/Apache FOP paths.
    </fail>
  </target>

  <target name="merge">
    <xslt-hrc-ref in='hrc-ref.docbook' out='hrc-ref.docbook-merged' style='db-merge.xsl'/>
  </target>
  
  
  <target name='xsltgen'>
  	<xslt in="db-import-in.xsl" out="${outxsl}" style="import-param.xsl">
  		<param name="docbook-path" expression="${dbpath}"/>
  	</xslt>
  </target>
  
  

  <target name="pdf" if='hrc-ref-available' depends='init, merge' description='Builds PDF presentation' unless='pdf.required'>
    <xslt-hrc-ref in='fo-titlepage.tmpl' out='fo-titlepage.xsl' style='${docbook-dir}/template/titlepage.xsl'/>

    <!--copy file='fo-hrc-ref.xsl' tofile='fo-hrc-ref-temporary.xsl' overwrite='true'>
     <filterset>
       <filter token="docbook-dir" value="${docbook-dir-url}"/>
      </filterset>
    </copy-->
    
    <antcall target='xsltgen'>
    	<param name='outxsl' value='db-import-fo.xsl'/>
    	<param name='dbpath' value='${docbook-dir-url}/fo'/>
    </antcall>
    
    <xslt-hrc-ref in='hrc-ref.docbook-merged' out='hrc-ref.fo' style='fo-hrc-ref-temporary.xsl'/>
    <!--delete file='fo-hrc-ref-temporary.xsl'/-->
    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
      <classpath>
        <pathelement location="${fop-dir}/build/fop.jar"/>
        <fileset dir="${fop-dir}/lib" includes="*.jar"/>
      </classpath>
    </taskdef>
    <fop format="application/pdf" fofile="hrc-ref.fo" outfile="hrc-ref.pdf"/>
  </target>

  <!-- TODO add Colorer as DocBook's highlighting engine -->
  <target name="html" if='xslt-exists' depends='init, merge' description='Builds HTML presentation' unless='html.required'>
    <xslt-hrc-ref in='html-titlepage.tmpl' out='html-titlepage.xsl' style='${docbook-dir}/template/titlepage.xsl'/>
    
    <!--copy file='html-hrc-ref.xsl' tofile='html-hrc-ref-temporary.xsl' overwrite='true'>
     <filterset>
       <filter token="docbook-dir" value="${docbook-dir-url}"/>
     </filterset>
    </copy-->
    <antcall target='xsltgen'>
    	<param name='outxsl' value='db-import-xhtml.xsl'/>
    	<param name='dbpath' value='${docbook-dir-url}/xhtml'/>
    </antcall>
    
    <xslt-hrc-ref in='hrc-ref.docbook-merged' out='index.html' style='html-hrc-ref-temporary.xsl'/>
    <!--delete file='html-hrc-ref-temporary.xsl'/-->
  </target>

  <target name="zip" description='Creates zip distribution file'>
    <zip destfile="hrc-ref.zip"
         basedir="."
         includes="db*, fo*, html*, hrc-ref.*.docbook, build.xml"
    />
  </target>

  <target name="all" depends='init, html, pdf, zip' description='Builds all target versions'>
  </target>

  <target name="clean" description='Removes all autogenerated files'>
    <delete>
      <fileset dir='.' includes='hrc-ref.zip,fo-titlepage.xsl,hrc-ref.docbook-merged,hrc-ref.fo,hrc-ref.pdf,html-titlepage.xsl,index.html,*-temporary*'/>
    </delete>
  </target>

</project>
