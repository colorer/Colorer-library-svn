<?xml version="1.0"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc
                         http://colorer.sf.net/2003/hrc.xsd">

 <annotation>
  <documentation>
    Python syntax description for Colorer Library.
    http://docs.python.org/ref/grammar.txt
  </documentation>
  <contributors><![CDATA[
    anatoly techtonik <techtonik@php.net>
  ]]></contributors>
 </annotation>

 <type name="python">
  <region name="pyKeyword" parent="def:Keyword"/>
  <region name="pyComment" parent="def:Comment"/>
  <region name="pyString" parent="def:String"/>
  <region name="pyStringEscape" parent="def:StringContent"/>
  <region name="pyNumber" parent="def:Number"/>
  <region name="pyNumberSuffix" parent="def:NumberSuffix"/>


  <scheme name="StringCommon"> <!-- common escapes for all types of Python strings -->
    <regexp match="/\\./" region="pyStringEscape" />
  </scheme>
  <scheme name="StringSingle"> <!-- single-quoted strings should end with slash if span multiple lines -->
    <regexp match="/(\\).$/" region="def:Error" region1="pyStringEscape" />
    <regexp match="/[^\\']$/" region="def:Error" />
    <regexp match="/\\$/" region="pyStringEscape" />
    <inherit scheme="StringCommon" />
  </scheme>
  <scheme name="StringDouble"> <!-- double-quoted strings should also end with slash to span multiple lines -->
    <regexp match="/(\\).$/" region="def:Error" region1="pyStringEscape" />
    <regexp match="/[^\\&quot;]$/" region="def:Error" />
    <regexp match="/\\$/" region="pyStringEscape" />
    <inherit scheme="StringCommon" />
  </scheme>

 
  <scheme name="python">
   <!-- python keywords : http://docs.python.org/ref/keywords.html -->
   <keywords ignorecase="no" region="pyKeyword">
    <word name="and"/>
    <word name="as"/>
    <word name="assert"/>
    <word name="break"/>
    <word name="class"/>
    <word name="continue"/>
    <word name="def"/>
    <word name="del"/>
    <word name="elif"/>
    <word name="else"/>
    <word name="except"/>
    <word name="exec"/>
    <word name="finally"/>
    <word name="for"/>
    <word name="from"/>
    <word name="global"/>
    <word name="if"/>
    <word name="import"/>
    <word name="in"/>
    <word name="is"/>
    <word name="lambda"/>
    <word name="not"/>
    <word name="or"/>
    <word name="pass"/>
    <word name="print"/>
    <word name="raise"/>
    <word name="return"/>
    <word name="try"/>
    <word name="while"/>
    <word name="with"/>
    <word name="yield"/>
   </keywords>

   <!-- basic python comment - consider it everything after # till the end of line -->
   <block start="/#/" end="/$/" region="pyComment" scheme="def:Comment"/>

   <!-- python strings : http://docs.python.org/ref/strings.html -->
   <block start="/((u|U)?(r|R)?)(&quot;{3}|&apos;{3})/" end="/\y4/" scheme="StringCommon" region="pyString"/>
   <block start="/((u|U)?(r|R)?)(&apos;)/"              end="/\y4/" scheme="StringSingle" region="pyString"/>
   <block start="/((u|U)?(r|R)?)(&quot;)/"              end="/\y4/" scheme="StringDouble" region="pyString"/>

   <!-- python integers : http://docs.python.org/ref/integers.html -->
   <!-- hex -->
   <regexp match="/\b(0[xX][0-9a-fA-F]*)([Ll])?(\w*)\b/" region1="pyNumber" region2="pyNumberSuffix" region3="def:Error" />
   <!-- octal -->
   <regexp match="/\b(0[0-7]*)([Ll])?(\w*)\b/" region1="pyNumber" region2="pyNumberSuffix" region3="def:Error" />
   <!-- decimal -->
   <regexp match="/\b([1-9]\d*)([Ll])?(\w*)\b/" region1="pyNumber" region2="pyNumberSuffix" region3="def:Error" />

  </scheme>
 </type>

</hrc>
