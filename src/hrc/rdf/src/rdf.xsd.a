<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  targetNamespace="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  elementFormDefault="qualified">

<xs:annotation>
 <xs:documentation source="http://www.w3.org/TR/rdf-syntax-grammar/index.html#section-grammar-summary">
  <![CDATA[
   XML schema for RDF/XML Syntax Specification.
   Written by Eugene Efremov <4mirror@mail.ru>
  ]]>
 </xs:documentation>
 <xs:documentation>
 
  NOTE! Complete description of RDF semantic via XML schema is impossible.
 
  You MUST use this only with Colorer xsd2hrc 
   or equivalent XSD customization tools.
  
  Some part of this schema definitions is "virtual classes" and  
   MUST BE REDEFINED via Colorer custom.xml (or by other means).
  
 </xs:documentation>
</xs:annotation>

<!-- attributes -->

<xs:attribute name="about" type="xs:anyURI"/>
<xs:attribute name="resource" type="xs:anyURI"/>
<xs:attribute name="datatype" type="xs:anyURI"/>
<xs:attribute name="ID" type="xs:ID"/>
<xs:attribute name="nodeID" type="xs:ID"/>
<xs:attribute name="parseType">
 <xs:simpleType>
  <xs:restriction base="xs:string">
   <xs:enumeration value="Resource"/>
   <xs:enumeration value="Literal"/>
   <xs:enumeration value="Collection"/>
  </xs:restriction>
 </xs:simpleType>
</xs:attribute>

<xs:attributeGroup name="propertyAttr">
 <annotation><documentation>
  7.2.25 propertyAttr 	
   attribute(URI == propertyAttributeURIs, string-value == anyString)
 </documentation></annotation>
 
 <xs:anyAttribute namespace="##other" processContents="lax"/> 
</xs:attributeGroup>

<!-- elements -->

<xs:group name="rdfElements">
 <annotation><documentation>
  This virtual scheme must be replaced.
 </documentation></annotation>
 <xs:sequence>
  <xs:element name="Seq" type="nodeElement"/>
  <xs:element name="Bag" type="nodeElement"/>
  <xs:element name="Alt" type="nodeElement"/>
  <rdf:Statement rdf:about="http://example.org/node1"/>
  <rdf:Property rdf:about="http://example.org/node1"/>
  <rdf:XMLLiteral rdf:about="http://example.org/node1"/>
  <rdf:List rdf:about="http://example.org/node1"/>
  <rdf:subject rdf:resource="http://example.org/node2"/>
  <rdf:predicate rdf:resource="http://example.org/node2"/>
  <rdf:object rdf:resource="http://example.org/node2"/>
  <rdf:type rdf:resource="http://example.org/node2"/>
  <rdf:value rdf:resource="http://example.org/node2"/>
  <rdf:first rdf:resource="http://example.org/node2"/>
  <rdf:rest rdf:resource="http://example.org/node2"/>
  <rdf:rest rdf:resource="http://example.org/node2"/>
 </xs:sequence>
</xs:group>



<!-- root -->

<xs:element name="RDF">
 <xs:complexType>
  <xs:group ref="nodeElementURIs"/>
 </xs:complexType> 
</xs:element>



<!-- 
  - 
  - !!! nodeElement 
  -
  -
  --> 

  <!-- rdf:Seq, rdf:Bag, rdf:Alt, rdf:Statement, rdf:Property and rdf:List. -->
<xs:element name="Seq" type="nodeElement"/>
<xs:element name="Bag" type="nodeElement"/>
<xs:element name="Alt" type="nodeElement"/>

<xs:element name="Description" type="nodeElement"/>
<xs:element name="nil" type="nodeElement"/>


<xs:group name="nodeElementURIs">
 <annotation><documentation>
  7.2.5 nodeElementURIs 	
   anyURI - ( coreSyntaxTerms | rdf:li | oldTerms )
 </documentation></annotation>
 
 <xs:sequence>
  <xs:element ref="Description"/>
  <xs:element ref="Seq"/>
  <xs:element ref="Bag"/>
  <xs:element ref="Alt"/>
  <!-- rdf:Seq, rdf:Bag, rdf:Alt, rdf:Statement, rdf:Property and rdf:List. -->
  <xs:any namespace="##other" processContents="skip"/>
 </xs:sequence> 
</xs:group>

<xs:complexType name="nodeElement">
 <annotation><documentation>
  7.2.11 nodeElement 	
   start-element(URI == nodeElementURIs
     attributes == set((idAttr | nodeIdAttr | aboutAttr )?, propertyAttr*))
   propertyEltList
   end-element()  
 </documentation></annotation>

 <xs:attribute ref="ID"/>
 <xs:attribute ref="nodeID"/>
 <xs:attribute ref="about"/>
 <xs:attributeGroup ref="propertyAttr"/>
 <xs:group ref="propertyElementURIs"/>
</xs:complexType>



<!-- 
  - 
  - !!! propertyElt
  -
  -
  --> 

  <!-- subject predicate object type value first rest _n ? -->

<xs:element name="type" type="emptyPropertyElt"/>
  
<xs:group name="containerElements">
 <annotation><documentation>
  <![CDATA[
   XSD don't understand definition like this:

   <xs:element name="_\d+" type="propertyElt"/>

   This group must be redefined by other means.
  ]]>
 </documentation></annotation>
 <xs:sequence>
  <xs:element name="li" type="propertyElt"/>
 </xs:sequence> 
</xs:group>

<xs:group name="propertyElementURIs">
 <xs:sequence>
  <!-- subject predicate object type value first rest _n ? -->
  <xs:group ref="containerElements"/>
  <xs:element ref="type"/>
  <xs:any namespace="##other" processContents="skip"/>
 </xs:sequence> 
</xs:group>


<xs:complexType name="propertyElt">
 <xs:annotation>
  <xs:documentation>
    Pure virtual type
    MUST be replased
  </xs:documentation>
 </xs:annotation>
 <xs:attribute ref="ID"/>
 <xs:attribute ref="datatype"/>
 <xs:attribute ref="nodeID"/>
 <xs:attribute ref="parseType"/>
 <xs:attribute ref="resource"/>
 <xs:attributeGroup ref="propertyAttr"/> 
 <!--
  Element content must be defined by other means.
  
  resourcePropertyElt | literalPropertyElt | parseTypeLiteralPropertyElt | parseTypeResourcePropertyElt | parseTypeCollectionPropertyElt | parseTypeOtherPropertyElt | emptyPropertyElt
 -->
</xs:complexType>

  
<xs:complexType name="resourcePropertyElt">
 <xs:attribute ref="ID"/>
 <xs:attributeGroup ref="propertyAttr"/> 
 <xs:group ref="nodeElementURIs"/>
</xs:complexType>

<xs:complexType name="literalPropertyElt">
 <xs:simpleContent>
  <xs:extension base="xs:string">
   <xs:attribute ref="ID"/>
   <xs:attribute ref="datatype"/>
   <xs:attribute ref="parseType"/>
   <xs:attributeGroup ref="propertyAttr"/> 
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="parseTypeLiteralPropertyElt" mixed='true'>
 <xs:attribute ref="ID"/>
 <xs:attribute ref="parseType"/>
 <xs:attributeGroup ref="propertyAttr"/> 
 <xs:sequence>
  <xs:any namespace="##other" processContents="skip"/>    
 </xs:sequence>
</xs:complexType>

<xs:complexType name="parseTypeCollectionPropertyElt">
 <xs:attribute ref="ID"/>
 <xs:attribute ref="parseType"/>
 <xs:attributeGroup ref="propertyAttr"/> 
 <xs:group ref="nodeElementURIs"/>
</xs:complexType>

<xs:complexType name="parseTypeOtherPropertyElt">
 <xs:attribute ref="ID"/>
 <xs:attribute ref="parseType"/>
 <xs:attributeGroup ref="propertyAttr"/> 
 <xs:group ref="propertyElementURIs"/>
</xs:complexType>

<xs:complexType name="emptyPropertyElt">
 <xs:attribute ref="ID"/>
 <xs:attribute ref="resource"/>
 <xs:attribute ref="nodeID"/>
 <xs:attributeGroup ref="propertyAttr"/> 
</xs:complexType>

</xs:schema>